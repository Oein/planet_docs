import stack
import math

var dim = 80
var scale = 3
var calc = 300

var mzs = 0


var mazearr = []
var x = 0
var y = 0

def get_rand_dir() {
    var dir = [[0, 1], [0, -1], [1, 0], [-1, 0]]
    var ret = []
    while (len(dir) > 0) {
        # print(dir)
        var r = math.floor(math.multiply(random(), len(dir)))

        append(ret, dir[r])
        var ndir = []
        var i = 0
        while (i < len(dir)) {
            # print("IR",i,r)
            if (int(i) == int(r)) {} else append(ndir, dir[i])
            i = i + 1
        }

        # print("NDI", ndir)

        dir = ndir
    }
    # print(ret)
    return ret
}

def gen_maze_tick() {
    var st = stack.top()
    var x = st[0]
    var y = st[1]

    var dirs = get_rand_dir()

    var i = 0
    var ex = 1
    while(i < 4) {
        var dx = dirs[i][0]
        var dy = dirs[i][1]
        var nx = x + dx
        var ny = y + dy

        var mx = 2 * nx + 1
        var my = 2 * ny + 1
        var dmx = 2 * x + 1 + dx
        var dmy = 2 * y + 1 + dy

        # print(mx, my, mazearr[mx][my])

        if(nx >= 0 and ny >= 0 and nx < dim and ny < dim and mazearr[mx][my] == 1){
            mazearr[mx][my] = 0
            mazearr[dmx][dmy] = 0
            stack.push([nx, ny])
            ex = 0
            break
        }
        i = i + 1
    }
    if(ex) stack.pop()
}

def gen_maze() {
    /summon marker ~ ~ ~ {Tags:["maze"]}
    mzs = 1
    var maze1 = []

    while (len(maze1) < dim * 2 + 1) append(maze1, 1)
    while (len(mazearr) < dim * 2 + 1) append(mazearr, maze1)

    x = 0
    y = 0
    mazearr[1][1] = 0

    stack.push([0, 0])
}


var bmi = 0
var bmj = 0
var bmdimtwo = dim * 2
var bmditwoone = dim * 2 + 1
var bmst = 0

def bmsb() {
    if(bmi < bmditwoone) {
        if(bmj < bmditwoone) {
            
            var x = bmi * scale
            var y = bmj * scale
            var tox = bmi * scale + scale
            var toy = bmj * scale + scale
            /forceload add ~^x& ~^y&

            if(mazearr[bmi][bmj] == 1) {
                /execute as @e[tag=maze] at @s run fill ~^x& ~-1 ~^y& ~^tox& ~3 ~^toy& minecraft:stone
            } else {
                /execute as @e[tag=maze] at @s run fill ~^x& ~-1 ~^y& ~^tox& ~-1 ~^toy& minecraft:stone
            }
            bmj = bmj + 1
        } else {
            bmj = 0
            bmi = bmi + 1
        }
    } else {
        bmst = 0
        bmi = 0
        bmj = 0

        /kill @e[tag=maze]
    }
}

def build_maze(){
    var scb = bmdimtwo * scale
    /execute as @e[tag=maze] at @s run fill ~ ~-1 ~ ~^scb& ~-1 ~^scb& minecraft:stone
}

def mtw(){
    if(len(stack.stak) > 0) {
        gen_maze_tick()
    }
}

def tick() {
    if(mzs == 1 and len(stack.stak) > 0) {
        print("M", mzs,"L", len(stack.stak))
        var i = 0
        while(i < calc) {
            mtw()
            i = i + 1
        }
    }
    if(mzs == 1 and len(stack.stak) == 0) {
        mzs = 0

        mazearr[0][1] = 0
        mazearr[len(mazearr) - 1][1] = 0
        # mazearr[dim * 2][0] = 0
        bmst = 1
        /execute as @e[tag=maze] at @s run function __namespace__:build_maze
    }
    if(bmst == 1) {
        var i = 0
        while(bmst == 1 and i < calc) {
            bmsb()
            i = i + 1
        }
    }
}